generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts[]
}

model comments {
  id         Int       @id @default(autoincrement())
  content    String
  user_id    Int?
  post_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_tags {
  post_id Int
  tag_id  Int
  posts   posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

model posts {
  id              Int         @id @default(autoincrement())
  title           String      @db.VarChar(255)
  content         String
  user_id         Int?
  category_id     Int?
  sentiment_score Float?
  created_at      DateTime?   @default(now()) @db.Timestamp(6)
  updated_at      DateTime?   @default(now()) @db.Timestamp(6)
  comments        comments[]
  post_tags       post_tags[]
  categories      categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users           users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(255)
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  post_tags  post_tags[]
}

model users {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(255)
  email      String     @unique @db.VarChar(255)
  password   String
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  comments   comments[]
  posts      posts[]
}
